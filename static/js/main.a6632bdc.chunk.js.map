{"version":3,"sources":["mazep.jpg","App.js","index.js"],"names":["module","exports","App","state","city","data","date","id","message","message1","title","img","desc","price","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","Date","toLocaleTimeString","alert","deleteFromDB","idTodelete","method","headers","console","log","updateDB","updateToApply","body","JSON","stringify","scrollWindow","h","document","querySelector","scrollTo","scrollHeight","this","interval","setInterval","clearInterval","a","toLocaleString","now","style","maxWidth","backgroundColor","color","textAlign","fontSize","fontFamily","Card","length","dat","padding","key","margin","float","marginLeft","type","onChange","e","target","value","placeholder","height","width","maxHeight","onClick","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a6632bdc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mazep.96a1a830.jpg\";","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Card,CardTitle,CardSubtitle,CardImg} from 'reactstrap'\nimport Maz from './mazep.jpg';\n\nclass App extends Component {\n  // 初始化元件的狀態\n  state = {\n    city:null,\n    data: [],\n    date:null,\n    id: 1,\n    message: null,\n    message1: null,\n    title:null,\n    img:null,\n    desc:null,\n    price:null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n \n  // 當元件載入時，它首先要從資料庫中獲取所有的資料，這裡會設定一個輪詢邏輯，及時將資料在 `UI` 中更新。\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // 永遠不要讓一個程序持續存在\n  // 當我們結束使用時，一定要殺死這個程序\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n\n  // 我們的第一個使用後端api的get方法\n  // 從我們的資料庫中獲取資料\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/chat')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // 使用 put 方法，在資料庫裡面插入一條新的資料\n  putDataToDB = (message,message1) => {\n\n    if((message1 && message) !==null){\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/chat/', {\n      id: idToBeAdded,\n      message: message,\n      message1: message1,\n      date:new Date().toLocaleTimeString()\n    });\n  }else{\n    alert(\"請補齊資料\")\n\n  }\n \n  \n  this.setState({  message1:\"\"})\n  \n  };\n\n\n \n\n\n\n  deleteFromDB = (idTodelete) => {\n\n  fetch('http://localhost:3001/chat/'+idTodelete, {\n    method: 'delete',\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n   \n\n    \n  }).then(res=>res.json())\n    .then(res => console.log(res));\n\n  }\n\n  // 我們的刪除方法使用我們的後端api\n  // 刪除現有資料庫資訊\n  // deleteFromDB = (idTodelete) => {\n  //   parseInt(idTodelete);\n  //   let objIdToDelete = null;\n  //   this.state.data.forEach((dat) => {\n  //     if (dat.id == idTodelete) {\n  //       objIdToDelete = dat._id;\n  //     }\n  //   });\n\n  //   axios.delete('http://localhost:3001/comments/', {\n  //     data: {\n  //       id: objIdToDelete,\n  //     },\n  //   });\n  // };\n\n\n  updateDB = (idTodelete,updateToApply) => {\n\n\n    fetch('http://localhost:3000/comments/'+idTodelete, {\n      method: 'put',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n     \n      body: JSON.stringify({\n        \"message\": updateToApply,\n        \"message1\": updateToApply,\n        })\n\n      \n    }).then(res=>res.json())\n      .then(res => console.log(res));\n\n\n  }\n\n  // 我們的更新方法使用我們的後端api\n  // 覆蓋現有的資料庫資訊\n  // updateDB = (idToUpdate, updateToApply) => {\n  //   let objIdToUpdate = null;\n  //   parseInt(idToUpdate);\n  //   this.state.data.forEach((dat) => {\n  //     if (dat.id == idToUpdate) {\n  //       objIdToUpdate = dat._id;\n  //     }\n  //   });\n\n  //   axios.post('http://localhost:3001/comments/:id', {\n  //     id: objIdToUpdate,\n  //     update: { message: updateToApply },\n  //   });\n  // };\n\n  scrollWindow=() =>{\n    let h = document.querySelector('.chats');\n    h.scrollTo(0, h.scrollHeight);\n}\n\n\n\n\n  render() {\n    const { data } = this.state;\n    const a=new Date().toLocaleString();;\n  \n  var timeInMs = Date.now();\n    return (\n      <div >\n\n\n\n\n\n\n\n\n\n\n\n\n        <div style={{maxWidth:\"100%\",backgroundColor:\"rgb(29,29,29)\",color:\"white\",textAlign:\"center\",fontSize:\"2em\",fontFamily:\"DFKai-sb\"}}>聊天室範例</div>\n        <ul>\n          <Card style={{backgroundColor:\"lightgrey\",color:\"black\"}}>\n      \n          {data.length <= 0\n            // ? 'NO DB ENTRIES YET'\n            ? '來當第一個發言的'\n            : data.map((dat) => (\n             \n              // setAttribute(\"src\", `http://localhost:5000/${file[0].name}`);\n\n                <ol style={{ padding: '10px' }} key={data.id}>\n               <h1 style={{margin:\"0\",fontSize:\"1em\",float:\"left\"}}>{dat.message} : {dat.message1}</h1> &nbsp;&nbsp;&nbsp;&nbsp;<p style={{marginLeft:\"5vw\",fontSize:\"0.2em\",float:\"left\"}}>{dat.date}<br></br>{a}</p>\n            {/* <CardTitle  style={{ color: 'gray' }}> id: {dat.message} </CardTitle>\n            <CardTitle  style={{ color: 'gray' }}>title: {dat.message1}</CardTitle>\n            <CardSubtitle  style={{ color: 'gray' }}> price:  {dat.price}</CardSubtitle>\n            <CardSubtitle  style={{ color: 'gray' }}>  desc: {dat.desc}</CardSubtitle>      */}\n \n                </ol>\n              ))}\n              </Card>\n        </ul>\n        <div style={{ padding: '10px',textAlign:\"center\" }}>\n          <input\n            type=\"text\"\n            \n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"名字\"\n            style={{ height:\"5vh\",width: '20vw',fontSize:\"1em\",margin:\"0\",textAlign:\"center\" }}\n          />\n        \n            <input\n            id=\"hidden1\"\n            type=\"text\"\n           \n            onChange={(e) => this.setState({ message1: e.target.value })}\n            value={this.state.message1}\n            placeholder=\"訊息\"\n            style={{ height:\"5vh\",width: '20vw',fontSize:\"1em\",margin:\"0\",textAlign:\"center\" }}\n          />\n       \n          &nbsp;&nbsp;&nbsp;\n          <button    style={{ maxHeight:\"9vh\",maxWidth: '15vw',fontSize:\"1em\",margin:\"0\",textAlign:\"center\",padding:\"0\" }} onClick={() => this.putDataToDB(this.state.message,this.state.message1)}>\n          輸入\n          </button>\n        </div>\n        {/* <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}